import order.filter.basic
import topology.uniform_space.cauchy

/-!
# Discrete uniformity
This file contains generalities about Cauchy filters (and convergence theoref) in spaces endowed
with the discrete uniformity. 

# Main Results

* `cauchy_discrete_is_constant` stating that a Cauchy filter in a discrete space is actually a
principal filter
* `ne_bot_unique_principal` saying that in a non-empty discrete space, two principal filters that
contain a non-trivial filter coincide
-/


namespace set

lemma prod_subset_diag_singleton_left {X : Type*} {S T : set X} (hS : S.nonempty)
  (hT : T.nonempty) (h_diag : S √óÀ¢ T ‚äÜ id_rel) : ‚àÉ x, S = {x} :=
begin
  rcases ‚ü®hS, hT‚ü© with ‚ü®‚ü®s, hs‚ü©, ‚ü®t, ht‚ü©‚ü©,
  refine ‚ü®s, (eq_singleton_iff_nonempty_unique_mem.mpr ‚ü®‚ü®s, hs‚ü©, _‚ü©)‚ü©,
  intros x hx,
  rw prod_subset_iff at h_diag,
  replace hs := h_diag s hs t ht, 
  replace hx := h_diag x hx t ht,
  simp only [id_rel, mem_set_of_eq] at hx hs,
  rwa [‚Üê hs] at hx,
end

lemma prod_subset_diag_singleton_right {X : Type*} {S T : set X} (hS : S.nonempty) (hT : T.nonempty) 
  (h_diag : S √óÀ¢ T ‚äÜ id_rel) : ‚àÉ x, T = {x} :=
begin
  rw set.prod_subset_iff at h_diag,
  replace h_diag := Œª x hx y hy, (h_diag y hy x hx).symm,
  exact prod_subset_diag_singleton_left hT hS ((prod_subset_iff).mpr h_diag),
end


lemma prod_subset_diag_singleton_eq {X : Type*} {S T : set X} (hS : S.nonempty) (hT : T.nonempty) 
  (h_diag : S √óÀ¢ T ‚äÜ id_rel) : ‚àÉ x, S = {x} ‚àß T = {x} :=
begin
  obtain ‚ü®‚ü®x, hx‚ü©, ‚ü®y, hy‚ü©‚ü© := ‚ü®prod_subset_diag_singleton_left hS hT h_diag,
    prod_subset_diag_singleton_right hS hT h_diag‚ü©,
  refine ‚ü®x, ‚ü®hx, _‚ü©‚ü©,
  rw [hy, set.singleton_eq_singleton_iff],
  exact (set.prod_subset_iff.mp h_diag x (by simp only [hx, set.mem_singleton]) y 
    (by simp only [hy, set.mem_singleton])).symm,
end

end set

section cauchy_discrete

open filter set
open_locale filter topology

lemma cauchy_discrete_le_principal {X : Type*} {uX : uniform_space X}
(hX : uniformity X = ùìü id_rel) {Œ± : filter X} (hŒ± : cauchy Œ±) : ‚àÉ x : X, Œ± ‚â§ ùìü {x} :=
begin
  rcases hŒ± with ‚ü®Œ±_ne_bot, Œ±_le‚ü©,
  rw [filter.le_def] at Œ±_le,
  specialize Œ±_le id_rel,
  simp only [filter.le_def, hX, mem_principal, id_rel_subset, mem_id_rel, eq_self_iff_true,
    implies_true_iff, forall_true_left, filter.mem_prod_iff] at Œ±_le,
  obtain ‚ü®_, ‚ü®hS, ‚ü®_, ‚ü®hT, H‚ü©‚ü©‚ü©‚ü© := Œ±_le,
  obtain ‚ü®x, hx‚ü© := prod_subset_diag_singleton_left (@filter.nonempty_of_mem X Œ± Œ±_ne_bot _ hS)
    (@filter.nonempty_of_mem _ _ Œ±_ne_bot _ hT) H,
  use x,
  rwa [filter.le_principal_iff, ‚Üê hx],
end

/-- The constant to which a Cauchy filter in a discrete space converges.
-/
noncomputable
definition cauchy_discrete_is_constant {X : Type*} {uX : uniform_space X}
  (hX : uniformity X = ùìü id_rel) {Œ± : filter X} (hŒ± : cauchy Œ±) : X :=
(cauchy_discrete_le_principal hX hŒ±).some

lemma cauchy_discrete_le  {X : Type*} {uX : uniform_space X} 
  (hX : uniformity X = ùìü id_rel) {Œ± : filter X} (hŒ± : cauchy Œ±) : 
  Œ± ‚â§ ùìü {cauchy_discrete_is_constant hX hŒ±} := Exists.some_spec (cauchy_discrete_le_principal hX hŒ±)

lemma ne_bot_unique_principal {X : Type*} [uniform_space X] (hX : uniformity X = ùìü id_rel)
  {Œ± : filter X} (hŒ± : Œ±.ne_bot) {x y : X} (hx : Œ± ‚â§ ùìü {x}) (hy : Œ± ‚â§ ùìü {y}) : x = y :=
begin
  have h_disc : discrete_topology X,
  apply discrete_topology_of_discrete_uniformity hX,
  have t2X := @discrete_topology.to_t2_space X _ h_disc,
  apply @eq_of_nhds_ne_bot X _ t2X x y,
  simp only [discrete_topology_iff_nhds.mp h_disc],
  apply @ne_bot_of_le _ _ _ hŒ±,
  simp only [le_inf_iff, le_pure_iff],
  exact ‚ü®le_principal_iff.mp hx, le_principal_iff.mp hy‚ü©,
end

end cauchy_discrete
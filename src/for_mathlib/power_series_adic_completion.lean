/-
Copyright (c) 2022 Mar√≠a In√©s de Frutos-Fern√°ndez, Filippo A. E. Nuccio. All rights reserved.
Released under Apache 2.0 license as described in the file LICENSE.
Authors: Mar√≠a In√©s de Frutos-Fern√°ndez, Filippo A. E. Nuccio
-/
import ring_theory.dedekind_domain.adic_valuation
import ring_theory.laurent_series
import ring_theory.power_series.well_known

open polynomial is_dedekind_domain.height_one_spectrum topological_space ratfunc sequentially_complete filter
open_locale discrete_valuation uniformity filter topological_space

-- open filter topological_space set classical uniform_space function
-- open_locale classical uniformity topological_space filter

variables (K : Type*) [field K]

noncomputable theory

def ideal_X : is_dedekind_domain.height_one_spectrum (polynomial K) := 
{ as_ideal := ideal.span({X}),
  is_prime := by { rw ideal.span_singleton_prime, exacts [prime_X, X_ne_zero] },
  ne_bot   := by { rw [ne.def, ideal.span_singleton_eq_bot], exact X_ne_zero }} 


def completion_of_ratfunc  := adic_completion (ratfunc K) (ideal_X K)

instance : field (completion_of_ratfunc K) := adic_completion.field (ratfunc K) (ideal_X K)

instance : algebra K (polynomial K) := infer_instance

instance : uniform_space (ratfunc K) :=
  (@adic_valued (polynomial K) _ _ _ (ratfunc K) _ _ _ (ideal_X K)).to_uniform_space

-- instance : valued (completion_of_ratfunc K) ‚Ñ§‚Çò‚ÇÄ :=
--   @valued.valued_completion _ _ _ _ (ideal_X K).adic_valued

-- instance : uniform_space (completion_of_ratfunc K) := 
-- begin
--   apply_instance,
-- end
  -- is_dedekind_domain.height_one_spectrum.uniform_space_adic_completion (ratfunc K) _

lemma foo : (nhds (0 : ratfunc K)).has_basis set.univ (Œª n : ‚Ñï,
  {F : (ratfunc K) | ‚Üë(multiplicative.of_add (n : ‚Ñ§)) ‚â§ (ideal_X K).valuation F}) :=
begin
  sorry
end

lemma foo' : (nhds (0 : ratfunc K)).has_basis set.univ (Œª n : ‚Ñ§,
  {F : (ratfunc K) | ‚Üë(multiplicative.of_add n) ‚â§ (ideal_X K).valuation F}) :=
begin
  sorry
end

-- def boo := filter.has_basis.uniformity_of_nhds_zero (foo K)

-- #check boo K

-- lemma boo_subset (n : ‚Ñï) : (boo K n) ‚àà (ùì§ (ratfunc K)) :=
-- variable (d : ‚Ñ§)
-- #check foo K

-- lemma uff : true := sorry
-- include K F

def ss (F : completion_of_ratfunc K) : ‚Ñï ‚Üí (ratfunc K) := seq ((quot.exists_rep F).some).2
    (Œª n, @filter.has_basis.mem_of_mem _ _ _ _ _ n
    (filter.has_basis.uniformity_of_nhds_zero (foo K)) trivial)

variable (F : completion_of_ratfunc K)
#check filter.map (ratfunc.coe_alg_hom K) ((quot.exists_rep F).some).1



#check ss K F
-- --   use this,
-- -- end
-- -- #check @filter.has_basis.mem_of_mem (ratfunc K) ‚Ñï (nhds 0) (Œª n, true) _ d (foo K)

-- -- #check boo

-- lemma boo_subset (n : ‚Ñï) : (boo K n) ‚àà (ùì§ (ratfunc K)) :=

-- def entourage : ‚Ñï ‚Üí set ((ratfunc K) √ó (ratfunc K)):= Œª n,
--   {x | ‚Üë(multiplicative.of_add (n : ‚Ñ§)) ‚â§ ((ideal_X K).valuation x) } √óÀ¢
--   { x | ‚Üë(multiplicative.of_add (n : ‚Ñ§)) ‚â§ ((ideal_X K).valuation x) }

-- example : add_group (ratfunc K) := 
-- begin
--   apply_instance,
-- end

-- -- local attribute [instance] topological_add_group.to_uniform_add_group


-- example (G : Type*) [_inst_1 : add_group G] [_inst_2 : topological_space G] [_inst_3 : topological_add_group G] :
--     ùì§ G = filter.comap (Œª (p : G √ó G), p.snd - p.fst) (nhds 0) :=
-- begin
--   apply uniformity_eq_comap_nhds_zero',
-- end

-- lemma entourage_subset (n : ‚Ñï) : entourage K n ‚àà (ùì§ (ratfunc K)) :=
-- begin
--   rw uniformity_eq_comap_nhds_zero' (ratfunc K),
--   rw filter.mem_comap',
--   rw entourage,
--   simp,
--   rw mem_nhds_iff,
--   use {F : (ratfunc K) | ‚Üë(multiplicative.of_add (n : ‚Ñ§)) ‚â§ (ideal_X K).valuation F},
--   split,
--   { simp only [set.set_of_subset_set_of],


--   },





  -- intro,
    -- have one : is_open ({y :
  --  ratfunc K | ‚àÄ (a b : ratfunc K),
  --  b - a = y ‚Üí (multiplicative.of_add (n : ‚Ñ§)) ‚â§ ((ideal_X K).valuation) a ‚àß
  --    (multiplicative.of_add (n : ‚Ñ§)) ‚â§ ((ideal_X K).valuation) b}),
  --     sorry,
  
-- end

-- #check seq ((quot.exists_rep F).some).2 (entourage_subset K)

def ss_int : ‚Ñ§ ‚Üí laurent_series K
|(n : nat) := ss K F n
| _ := 0

lemma foo2 (Œ± : Type*) (u : ‚Ñï ‚Üí Œ±) (N : ‚Ñï) (hu : ‚àÄ m : ‚Ñï, N ‚â§ m ‚Üí u m = u N) :
  at_top.map u ‚â§ pure (u N) := --at_top.map u ‚â§ ùìü ({u N}) :=
begin
  simp only [le_pure_iff, mem_map, mem_at_top_sets, ge_iff_le, set.mem_preimage,
    set.mem_singleton_iff],
  exact ‚ü®N, hu‚ü©,
end

lemma bar (Œ± : Type*) (u : ‚Ñï ‚Üí Œ±) (N : ‚Ñï) (H : at_top.map u ‚â§ pure (u N)) :
  ‚àÉ d, ‚àÄ m : ‚Ñï, d ‚â§ m ‚Üí u m = u d :=
  --  := --at_top.map u ‚â§ ùìü ({u N}) :=
begin
  -- intros m hm,
  -- simp only [le_pure_iff, mem_map, mem_at_top_sets, ge_iff_le, set.mem_preimage,
  --   set.mem_singleton_iff] at H,
  simp at H,
  obtain ‚ü®a, ha‚ü© := H,
  use a,
  intros m hm,
  by_cases a ‚â§ N,
  { have : u a = u N,
    exact ha a (le_of_eq (refl _)),
    rw this,
    exact ha _ hm },
  { replace h : N < a, sorry, sorry,  },
  -- let A := min a N,
  -- have hm' : A ‚â§ m,
  -- simp * at *,
  -- apply ha,
  -- have := (le_of_eq (refl a)),
  -- specialize ha b (le_max_iff.mpr _),
  -- apply or.intro_left _, 
  -- exact this,
  
  -- simp only [this, true_or],
  -- have := (true_or (le_of_eq (refl a))),

  -- squeeze_simp [b],
  -- simp only [le_pure_iff, mem_map, mem_at_top_sets, ge_iff_le, set.mem_preimage,
  --   set.mem_singleton_iff],
  -- exact ‚ü®N, hu‚ü©,
end

def eventual_coeff (‚Ñ± : filter (ratfunc K)) (h : cauchy ‚Ñ±) (d : ‚Ñ§) : K :=
-- ‚àÉ (t : set (laurent_series K)), t ‚àà ‚Ñ±.map (ratfunc.coe_alg_hom K) ‚àß t ‚â† ‚àÖ ‚àß (‚àÄ F G : (laurent_series K), F ‚àà t ‚Üí G ‚àà t ‚Üí F.coeff d = G.coeff d),
  sorry

def temp_coeff : ‚Ñ§ ‚Üí (laurent_series K ‚Üí K) := Œª i F, F.coeff i

lemma eventually_eq_eventual_coeff (‚Ñ± : filter (ratfunc K)) (h : cauchy ‚Ñ±) (d : ‚Ñ§) :
  -- ( T : set (completion_of_ratfunc K)) : 
  ‚àÄ T ‚àà ‚Ñ±, (‚Ñ±.map (ratfunc.coe_alg_hom K)).map (temp_coeff K d) = (‚Ñ±.map (ratfunc.coe_alg_hom K)).map (temp_coeff K d) :=
begin
  sorry,
end

example (X : Type*) [uniform_space X] (‚Ñ± : filter X) (hF : cauchy ‚Ñ±) :
  ‚àÉ x : uniform_space.completion X, ‚Ñ±.map coe ‚â§ ùìù x :=
begin
  refine complete_space.complete _,
  refine cauchy.map hF _,
  refine uniform_space.completion.uniform_continuous_coe X,
end

def set_fae (d : ‚Ñ§) : set (ratfunc K √ó ratfunc K) :=
  {P | ‚Üë(multiplicative.of_add d) ‚â§ (ideal_X K).valuation (P.1 - P.2)}

lemma coeff_fae (d : ‚Ñ§) (x y : ratfunc K) (H : (x, y) ‚àà (set_fae K d)) :
 (x : laurent_series K).coeff d = (y : laurent_series K).coeff d :=
begin
  sorry
end

lemma entourage_fae (d : ‚Ñ§) : set_fae K d ‚àà ùì§ (ratfunc K) :=
begin
  sorry,
end

instance discrete_fae : uniform_space K := ‚ä•

def eval_fae (d : ‚Ñ§) : ratfunc K ‚Üí K := Œª x : ratfunc K, (x : laurent_series K).coeff d

lemma unif_cnts_fae (d : ‚Ñ§) : uniform_continuous (eval_fae K d) :=
-- begin
  sorry
-- end

def eval_compl_fae (d : ‚Ñ§) : (completion_of_ratfunc K) ‚Üí K := sorry -- use `eval_fae` and `unif_cnts_fae` to prove that the first extends to the completion

lemma cauchy_fae (d : ‚Ñ§) (Œ± : filter (completion_of_ratfunc K)) (hŒ± : cauchy Œ±) :
  cauchy (Œ±.map (eval_compl_fae K d)) := sorry

variables (d : ‚Ñ§) (‚Ñ± : filter (completion_of_ratfunc K))
#check ‚Ñ±.map (eval_compl_fae K d) --questo tizio √® di Cauchy ma K √® banale, quindi √® costante!

def isom : 
  -- adic_completion.field (ratfunc K) (ideal_X K) ‚âÉ ‚Ñ§ := sorry
  (completion_of_ratfunc K) ‚âÉ (laurent_series K) :=
{ to_fun :=
  begin
  intro Œ±,
  apply hahn_series.mk,
  swap,
  intro d,
  obtain ‚ü®‚Ñ±, h‚Ñ±‚ü© := (quot.exists_rep Œ±).some,
  have h‚Ñ±1 := cauchy_iff.mp h‚Ñ±,
  have h‚Ñ±2 := h‚Ñ±.2,
  have h‚Ñ±_unif := h‚Ñ±.2 (set_fae K d) (entourage_fae K d),
  let T := h‚Ñ±_unif.some,
  have hT := h‚Ñ±_unif.some_spec,
  have hT_nebot : T.nonempty,
  sorry,
  have : true,
  obtain ‚ü®x, hx‚ü© := set.nonempty_def.mp hT_nebot,
  -- let x := hT_nebot.some,
  -- have hx := ht_nebot.some_mem,
  -- rcases hT with ‚ü®a, b‚ü©,
  -- let œÜ : 
  -- apply hahn_series.mk,
  -- swap,
  -- use Œª n, Lim k (ss_int K Œ± k).coeff n,

  obtain ‚ü®a, ha‚ü© := (quot.exists_rep Œ±).some,
  let b := a.map (ratfunc.coe_alg_hom K),
  let œÜ : ‚Ñ§ ‚Üí (laurent_series K ‚Üí K) := Œª i : ‚Ñ§, Œª F : (laurent_series K), F.coeff i,
  apply hahn_series.mk,
  swap,
  intro d,
  let c:= b.map (œÜ d),
  letI : topological_space K := sorry,--discrete one
  use Lim c,
  -- have hc : cauchy c, sorry,
  -- have : ‚àÉ (t : set (laurent_series K)), t ‚àà b ‚àß nonempty t ‚àß (‚àÄ F G : (laurent_series K), F ‚àà t ‚Üí G ‚àà t ‚Üí F.coeff d = G.coeff d),
  -- sorry,
  -- let F : laurent_series K := ((this.some_spec).2.1).some,
  -- use F.coeff d,
  -- sorry,

  end,
  inv_fun := sorry,
  left_inv := sorry,
  right_inv := sorry }


import for_mathlib.laurent_series_iso.old_power_series_adic_completion
import topology.uniform_space.abstract_completion

noncomputable theory

open uniform_space power_series abstract_completion is_dedekind_domain.height_one_spectrum polynomial
open_locale discrete_valuation

-- namespace laurent_series

-- /-The main point of this section is to prove the equality between the X-adic valuation and the order of laurent_series. Applying then `fae_order_eq_val'`, we deduce that for every `f : ratfunc`, the equality of `f : ratfunc` coincides with the valuation of `‚Üëf : laurent_series` -/



-- end laurent_series

namespace completion_laurent_series

variables (K : Type*) [field K]

def power_series.ideal_X (K : Type*) [field K] : is_dedekind_domain.height_one_spectrum 
  (power_series K) := 
{ as_ideal := ideal.span({X}),
  is_prime := power_series.span_X_is_prime,
  ne_bot   := by { rw [ne.def, ideal.span_singleton_eq_bot], exact X_ne_zero }} 

instance : valued (laurent_series K) ‚Ñ§‚Çò‚ÇÄ := valued.mk' (power_series.ideal_X K).valuation

section complete
-- open filter
open_locale filter

def coeff_map (d : ‚Ñ§) : laurent_series K ‚Üí K := Œª x, x.coeff d

lemma uniform_continuous_coeff_map {uK : uniform_space K} (h : uniformity K = ùìü id_rel) (d : ‚Ñ§) :
  uniform_continuous (coeff_map K d) := sorry

/- The definition below avoids the assumption that `K` be endowed with the trivial uniformity,
  rather putting this in the proof.
-/
variable {K}
def cauchy.coeff_map' {‚Ñ± : filter (laurent_series K)} (h‚Ñ± : cauchy ‚Ñ±) : ‚Ñ§ ‚Üí K :=
begin
  letI : uniform_space K := ‚ä•,
  have hK : @uniformity K ‚ä• = filter.principal id_rel := rfl,
  use Œª d, cauchy_discrete_is_constant hK (h‚Ñ±.map (uniform_continuous_coeff_map K hK d)),
end

-- lemma cauchy.coeff_map_zero_at_bot {‚Ñ± : filter (laurent_series K)} (h‚Ñ± : cauchy ‚Ñ±) : ‚àÉ N, 
--   ‚àÄ n ‚â§ N, ‚Ñ±.map (ratfunc.coeff_map' K n) ‚â§ filter.principal {0} :=
-- begin
--   simp only [principal_singleton, pure_zero, nonpos_iff, mem_map],
--   obtain ‚ü®N, hN‚ü© := coeff_eventually_zero_cauchy h‚Ñ±,
--   use  N,
--   intros n hn,
--   apply filter.mem_of_superset hN,
--   intros a ha,
--   exact ha n hn,
-- end

-- lemma cauchy.coeff_map_zero_at_bot' {‚Ñ± : filter (ratfunc K)} (h‚Ñ± : cauchy ‚Ñ±) : ‚àÄ·∂† n in at_bot,
--   ‚Ñ±.map (ratfunc.coeff_map K n) ‚â§ filter.principal {0} :=
-- eventually_at_bot.mpr (cauchy.coeff_map_zero_at_bot h‚Ñ±)

-- lemma cauchy.coeff_map_support_bdd {‚Ñ± : filter (laurent_series K)} (h‚Ñ± : cauchy ‚Ñ±) : ‚àÉ N, ‚àÄ n,
--   n ‚â§ N ‚Üí (h‚Ñ±.coeff_map' n) = 0 :=
-- begin
--   letI : uniform_space K := ‚ä•,
--   have hK : uniformity K = filter.principal id_rel, refl,
--   obtain ‚ü®N, hN‚ü© := h‚Ñ±.coeff_map_zero_at_bot,
--   use N,
--   intros n hn,
--   exact ne_bot_unique_principal hK (h‚Ñ±.map (uniform_continuous_coeff_map hK n)).1
--     (h‚Ñ±.coeff_map_le n) (hN n hn),
-- end
open filter topological_space
open_locale filter topology uniformity

-- lemma cauchy.eventually‚ÇÅ {‚Ñ± : filter (laurent_series K)} (h‚Ñ± : cauchy ‚Ñ±) :
-- ‚àÄ·∂† f in ‚Ñ±, ‚àÉ N, ‚àÄ n, N ‚â§ n ‚Üí (h‚Ñ±.coeff_map' n) = coeff_map K n f := 
-- begin
--   sorry
-- end

lemma cauchy.eventually‚ÇÅ {‚Ñ± : filter (laurent_series K)} (h‚Ñ± : cauchy ‚Ñ±) :
‚àÄ·∂† f in ‚Ñ±, ‚àÄ·∂† n in (at_bot : (filter ‚Ñ§)), (h‚Ñ±.coeff_map' n) = coeff_map K n f := 
begin
  -- simp_rw eventually_at_top,
  -- simp_rw eventually_iff, 
  -- apply cauchy.eventually‚ÇÅ,
  sorry,
end

lemma cauchy.coeff_map_support_bdd'' {‚Ñ± : filter (laurent_series K)} (h‚Ñ± : cauchy ‚Ñ±) :
  bdd_below (h‚Ñ±.coeff_map'.support) :=
begin
  sorry,
end

def cauchy.mk_laurent_series {‚Ñ± : filter (laurent_series K)} (h‚Ñ± : cauchy ‚Ñ±) : (laurent_series K) :=
hahn_series.mk (Œª d, h‚Ñ±.coeff_map' d)
  (set.is_wf.is_pwo (h‚Ñ±.coeff_map_support_bdd''.well_founded_on_lt))

def new.entourage (d : ‚Ñï) : set (laurent_series K √ó laurent_series K) :=
  {P | (power_series.ideal_X K).valuation (P.1 - P.2) < ‚Üë(multiplicative.of_add (- (d : ‚Ñ§)))}

lemma new.entourage_uniformity_mem (d : ‚Ñï) : new.entourage d ‚àà ùì§ (laurent_series K) := sorry

instance : complete_space (laurent_series K) :=
begin
  -- haveI : (uniformity (laurent_series K)).is_countably_generated, sorry,
  -- apply uniform_space.complete_of_cauchy_seq_tendsto,
  -- intros u hu,
  -- rw cauchy_seq at hu,
  -- rcases hu with ‚ü®h1, h2‚ü©,
  -- simp at hu,
  fconstructor,
  rintros ‚Ñ± h‚Ñ±,
  use h‚Ñ±.mk_laurent_series,
  obtain ‚ü®V, H, hV‚ü© := h‚Ñ±.eventually‚ÇÅ.exists_mem,

  apply sequentially_complete.le_nhds_of_seq_tendsto_nhds h‚Ñ± (new.entourage_uniformity_mem),
  { intros S hS,
    rw uniformity_eq_comap_nhds_zero at hS,
    simp at hS,
    sorry,
  },
  { have uno := h‚Ñ±.eventually‚ÇÅ,
    simp_rw [eventually_at_bot, eventually_iff] at uno,


    rw tendsto_at_top',
    intros S hS,
    rw valued.mem_nhds at hS,
    obtain ‚ü®n_mul, hn_mul‚ü© := hS,
    obtain ‚ü®n, hn‚ü© : ‚àÉ n : ‚Ñï, (multiplicative.of_add (n : ‚Ñ§) : ‚Ñ§‚Çò‚ÇÄ) = n_mul, sorry,--sono pigro
    use n,
    intros d hd,
    apply hn_mul,
    simp only [set.mem_set_of_eq],
    -- rw sequentially_complete.seq,
    suffices : sequentially_complete.seq h‚Ñ± new.entourage_uniformity_mem d -
      cauchy.mk_laurent_series h‚Ñ± = 0,
    {rw this, simp },
    
    

  },
  -- rw filter.le_def,
  -- intros S hS,
  -- replace hS := uniform_space.mem_nhds_iff.mp hS,
  -- rw uniformity_eq_comap_nhds_zero at hS,
  -- obtain ‚ü®V, hV, hV_S‚ü© := hS,
  -- simp only [mem_comap, exists_prop] at hV,
  -- obtain ‚ü®U, hU, hU_S‚ü© := hV,
  -- have H := h‚Ñ±.eventually‚ÇÅ,
  -- simp_rw [eventually_at_bot, eventually_iff] at H,
  -- have mah : U = {x : laurent_series K | ‚àÉ (a : ‚Ñ§), ‚àÄ (b : ‚Ñ§), b ‚â§ a ‚Üí cauchy.coeff_map' h‚Ñ± b =
  --   coeff_map K b x}, sorry,
  -- -- rw ‚Üê mah at H,
  -- refine ‚Ñ±.3 _ hV_S,
  -- refine ‚Ñ±.3 _ (ball_mono hU_S (cauchy.mk_laurent_series h‚Ñ±)),
  -- rw mah,
  -- simp only [set.preimage_set_of_eq, filter.mem_sets],
  
end

end complete

lemma coe_range_dense : dense_range (coe : (ratfunc K) ‚Üí (laurent_series K)) := sorry

local attribute [instance] classical.prop_decidable
open multiplicity unique_factorization_monoid

lemma polynomial.norm_unit_X : norm_unit (polynomial.X : (polynomial K)) = 1 :=
begin
  have := @coe_norm_unit K _ _ _ polynomial.X,
  rwa [leading_coeff_X, norm_unit_one, units.coe_one, map_one, units.coe_eq_one] at this,
end

lemma polynomial.X_eq_normalize : (polynomial.X : (polynomial K)) = normalize polynomial.X :=
  by simp only [normalize_apply, polynomial.norm_unit_X, units.coe_one, mul_one]

lemma power_series.norm_unit_X : norm_unit (power_series.X : (power_series K)) = 1 :=
  by {dsimp only [norm_unit],rw [inv_eq_one, ‚Üê units.coe_eq_one, unit_of_divided_by_X_pow_nonzero,
    divided_by_X_pow_of_X_eq_one]}

lemma power_series.X_eq_normalize : (power_series.X : (power_series K)) = normalize power_series.X :=
  by simp only [normalize_apply, power_series.norm_unit_X, units.coe_one, mul_one]

lemma aux_old_pol (P : (polynomial K)) (hP : P ‚â† 0) : 
  (normalized_factors (ideal.span {‚ÜëP})).count (power_series.ideal_X K).as_ideal =
  (normalized_factors (ideal.span {P})).count (ideal.span {polynomial.X} : ideal (polynomial K)) :=
begin
  have for_pol := principal_ideal_ring.count_normalized_factors_eq_count_normalized_factors_span hP
    polynomial.X_ne_zero (polynomial.norm_unit_X K) polynomial.prime_X,
  rw [‚Üê for_pol],
  have for_pow := principal_ideal_ring.count_normalized_factors_eq_count_normalized_factors_span
    (coe_ne_zero hP) power_series.X_ne_zero (power_series.norm_unit_X K) power_series.X_prime,
  erw [‚Üê for_pow],
  have aux_pol := @multiplicity_eq_count_normalized_factors (polynomial K) _ _ _ _ _ _ polynomial.X P
    (irreducible_X) hP,
  have aux_pow_series := @multiplicity_eq_count_normalized_factors (power_series K) _ _ _ _ _ _ power_series.X
    ‚ÜëP (prime.irreducible power_series.X_prime) (coe_ne_zero hP),
  apply nat.le_antisymm,
  { rw [polynomial.X_eq_normalize, power_series.X_eq_normalize, ‚Üê part_enat.coe_le_coe, ‚Üê aux_pol, 
      ‚Üê multiplicity.pow_dvd_iff_le_multiplicity, polynomial.X_pow_dvd_iff],
    intros d hd,
    replace aux_pow_series := le_of_eq aux_pow_series.symm,
    rw [‚Üê multiplicity.pow_dvd_iff_le_multiplicity, power_series.X_pow_dvd_iff] at aux_pow_series,
    replace aux_pow_series := aux_pow_series d hd,
    rwa [polynomial.coeff_coe P d] at aux_pow_series },
  { rw [polynomial.X_eq_normalize, power_series.X_eq_normalize, ‚Üê part_enat.coe_le_coe, ‚Üê aux_pow_series, 
      ‚Üê multiplicity.pow_dvd_iff_le_multiplicity, power_series.X_pow_dvd_iff],
    intros d hd,
    replace aux_pol := le_of_eq aux_pol.symm,
    rw [‚Üê multiplicity.pow_dvd_iff_le_multiplicity, polynomial.X_pow_dvd_iff] at aux_pol,
    replace aux_pol := aux_pol d hd,
    rwa [‚Üê polynomial.coeff_coe P d] at aux_pol },
end


lemma should_be_in_old_pol (P : (polynomial K)) : (ideal_X K).int_valuation (P) =
  (power_series.ideal_X K).int_valuation (‚ÜëP : (power_series K)) :=
begin
  by_cases hP : P = 0,
  { rw [hP, valuation.map_zero, polynomial.coe_zero, valuation.map_zero] },
  { simp only [fae_int_valuation_apply],
    rw [int_valuation_def_if_neg _ hP, int_valuation_def_if_neg _ $ coe_ne_zero hP],
    simp only [ideal_X_span, of_add_neg, inv_inj, with_zero.coe_inj, embedding_like.apply_eq_iff_eq,
      nat.cast_inj],
    have span_ne_zero : (ideal.span {P} : ideal (polynomial K)) ‚â† 0 ‚àß
    (ideal.span {polynomial.X} : ideal (polynomial K)) ‚â† 0 := by simp only [ideal.zero_eq_bot,
    ne.def, ideal.span_singleton_eq_bot, hP, polynomial.X_ne_zero, not_false_iff, and_self],
    have span_X_prime : (ideal.span {polynomial.X} : ideal (polynomial K)).is_prime,
    { apply (@ideal.span_singleton_prime (polynomial K) _ _ polynomial.X_ne_zero).mpr prime_X },
    have := @count_normalized_factors_eq_associates_count K _ (ideal.span {P})
    (ideal.span {polynomial.X}) span_ne_zero.1 ((@ideal.span_singleton_prime (polynomial K) _ _ 
    polynomial.X_ne_zero).mpr prime_X) span_ne_zero.2,
    convert this.symm,

    have span_ne_zero' : (ideal.span {‚ÜëP} : ideal (power_series K)) ‚â† 0 ‚àß
    ((power_series.ideal_X K).as_ideal : ideal (power_series K)) ‚â† 0 := by simp only [ne.def, 
      ideal.zero_eq_bot, ideal.span_singleton_eq_bot, coe_ne_zero hP, power_series.X_ne_zero,
      not_false_iff, and_self, (power_series.ideal_X K).3],
    have also := @count_normalized_factors_eq_associates_count' K _ (ideal.span {‚ÜëP})
    (power_series.ideal_X K).as_ideal span_ne_zero'.1 (power_series.ideal_X K).2 span_ne_zero'.2,
    rw [‚Üê aux_old_pol _ _ hP],
    convert also.symm,
  }
end


lemma ovvio (f : (polynomial K)) (g : (polynomial K)) (hg : g ‚â† 0) : (ratfunc.mk f g) = 
  is_localization.mk' (ratfunc K) f ‚ü®g, mem_non_zero_divisors_iff_ne_zero.2 hg‚ü© :=
by simp only [mk_eq_div, is_fraction_ring.mk'_eq_div, set_like.coe_mk]

lemma ovvio' (f : (polynomial K)) (g : polynomial K) (hg : g ‚â† 0) : 
  (ideal_X K).valuation ( ratfunc.mk f g) =
  ((ideal_X K).int_valuation f) / ((ideal_X K).int_valuation g) :=
by simp only [ovvio _ _ _ hg, valuation_of_mk', set_like.coe_mk]

lemma ratfunc.coe_coe (f : polynomial K) : (‚Üë(algebra_map (polynomial K) (ratfunc K) f) :
  (laurent_series K)) = (algebra_map (power_series K) (laurent_series K)) f :=
by {rw [ratfunc.coe_def, coe_alg_hom, lift_alg_hom_apply, denom_algebra_map f, map_one, div_one,
  num_algebra_map], refl}


lemma should_be_in_old' (P: (ratfunc K)) : (ideal_X K).valuation (P) =
  (power_series.ideal_X K).valuation ((‚ÜëP : (laurent_series K))) :=
begin
  apply ratfunc.induction_on' P,
  intros f g h,
  convert ovvio' K f g h,
  rw ovvio K f g h,
  have aux : (‚Üë(is_localization.mk' (ratfunc K) f ‚ü®g, mem_non_zero_divisors_iff_ne_zero.2 h‚ü©) : 
    laurent_series K) = ((is_localization.mk' (laurent_series K) (‚Üëf : (power_series K))
    ‚ü®g, mem_non_zero_divisors_iff_ne_zero.2 $ coe_ne_zero h‚ü©) : laurent_series K),
  { simp only [is_fraction_ring.mk'_eq_div, set_like.coe_mk, coe_div],
    congr;
    apply ratfunc.coe_coe K,
   },
  rw aux,
  have := @valuation_of_mk' (power_series K) _ _ _ (laurent_series K) _ _ _
    (power_series.ideal_X K) ‚Üëf ‚ü®g, mem_non_zero_divisors_iff_ne_zero.2 $ coe_ne_zero h‚ü©,
  convert this;
  apply should_be_in_old_pol,
end


lemma should_be_in_old (P‚ÇÅ P‚ÇÇ : (ratfunc K)) : valued.v (P‚ÇÅ - P‚ÇÇ) =
  valued.v ((‚ÜëP‚ÇÅ : (laurent_series K)) - ‚ÜëP‚ÇÇ) :=
begin
  have : valued.v (P‚ÇÅ - P‚ÇÇ) = (ideal_X K).valuation (P‚ÇÅ - P‚ÇÇ),
  refl,
  rw [this, should_be_in_old', ratfunc.coe_sub],
  refl,
end

-- FAE: The one below is probably the most disgusting proof on earth
lemma coe_is_inducing : uniform_inducing (coe : (ratfunc K) ‚Üí (laurent_series K)) :=
begin
  rw uniform_inducing_iff,
  rw filter.comap,
  ext S,
  split,
  { intro hS,
    simp only [exists_prop, filter.mem_mk, set.mem_set_of_eq] at hS,
    obtain ‚ü®T, ‚ü®hT, pre_T‚ü©‚ü© := hS,
    rw uniformity_eq_comap_nhds_zero at hT ‚ä¢,
    simp only [filter.mem_comap, exists_prop] at hT ‚ä¢,
    obtain ‚ü®R, ‚ü®hR, pre_R‚ü©‚ü© := hT,
    obtain ‚ü®d, hd‚ü© := valued.mem_nhds.mp hR,

    use {P : (ratfunc K) | valued.v P < ‚Üëd},
    split,
    { rw valued.mem_nhds,-- questa parentesi e' orribile
      use d,
      simp only [sub_zero],
    },
    { refine subset_trans _ pre_T,
      simp only [set.preimage_set_of_eq],
      rintros ‚ü®P1, P2‚ü© h,
      simp only [set.mem_set_of_eq] at h,
      rw set.mem_preimage,
      simp only,
      apply pre_R,
      simp only [set.mem_preimage],
      apply hd,
      simp only [set.mem_set_of_eq, sub_zero],

      rw ‚Üê should_be_in_old,
        --this is the statement that the valuations on pol and laurent ser coincide
      exact h,
    },
  },
  { simp,
    intro hS,
    -- simp at hS,
    rw uniformity_eq_comap_nhds_zero at hS ‚ä¢,
    simp only [filter.mem_comap, exists_prop] at hS ‚ä¢,
    obtain ‚ü®T, ‚ü®hT, pre_T‚ü©‚ü© := hS,
    -- simp only [filter.mem_comap],
    obtain ‚ü®d, hd‚ü© := valued.mem_nhds.mp hT,
    let try := {f : (laurent_series K) | valued.v f < ‚Üëd},
    use (Œª (x : laurent_series K √ó laurent_series K), x.snd - x.fst) ‚Åª¬π' try,
    use try,
    { split,
      { rw valued.mem_nhds,-- questa parentesi e' orribile
        use d,
        simp only [sub_zero],
      },
      { simp only [set.preimage_set_of_eq],
      } },
    { simp only [set.preimage_set_of_eq],
      refine subset_trans _ pre_T,
      rintros ‚ü®P1, P2‚ü© h,
      simp only [set.mem_set_of_eq] at h,
      rw set.mem_preimage,
      simp only,
      apply hd,
      simp only [set.mem_set_of_eq, sub_zero],

      rw should_be_in_old,
      exact h,
    },
    
  },
end

lemma unif_cont_coe : uniform_continuous (coe : (ratfunc K) ‚Üí (laurent_series K)) :=
  (uniform_inducing_iff'.1 (coe_is_inducing K)).1

noncomputable!
def ratfunc_pkg : abstract_completion (ratfunc K) := uniform_space.completion.cpkg 

noncomputable!
def laurent_series_pkg : abstract_completion (ratfunc K) :=
{ space := laurent_series K,
  coe := coe,
  uniform_struct := infer_instance,
  complete := infer_instance,
  separation := infer_instance,
  uniform_inducing := coe_is_inducing K,
  dense := coe_range_dense K}


noncomputable!
def extension_as_ring_hom := uniform_space.completion.extension_hom (coe_alg_hom K).to_ring_hom

noncomputable!
def compare_pkg : (completion_of_ratfunc K) ‚âÉ·µ§ laurent_series K :=
  compare_equiv (ratfunc_pkg K) (laurent_series_pkg K)


-- lemma aux (f : ratfunc K) : (f : laurent_series K) = compare_pkg K ‚Üëf :=
--   ((abstract_completion.compare_coe (ratfunc_pkg K) (laurent_series_pkg K) f)).symm

-- lemma extension_eq_compare : (œï K (unif_cont_coe K).continuous).to_fun = (compare_pkg K).to_fun :=
--   uniform_space.completion.extension_unique (unif_cont_coe K)
--     (uniform_continuous_compare_equiv _ _) (aux K)

noncomputable! def  laurent_series_ring_equiv : 
  ring_equiv (completion_of_ratfunc K) (laurent_series K) :=
{ map_mul' := (extension_as_ring_hom K (unif_cont_coe K).continuous).map_mul',
  map_add' := (extension_as_ring_hom K (unif_cont_coe K).continuous).map_add',
  .. compare_pkg K }

end completion_laurent_series